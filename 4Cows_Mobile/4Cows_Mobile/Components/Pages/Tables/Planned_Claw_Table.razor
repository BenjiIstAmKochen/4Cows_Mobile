@page "/geplante_Klauen_Daten"
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PClawTreatmentService pClawTreatmentService
@inject ClawTreatmentService clawTreatmentService

<MudGrid Justify="Justify.FlexEnd">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Secondary" Size="Size.Large" OnClick="OpenPlannedClawDialog"></MudIconButton>
</MudGrid>
<MudSpacer></MudSpacer>
<MudText Typo="Typo.h3" Class="mb-3">geplante Klauen Behandlungen</MudText>

<MudTable Elevation="5" Items="@Treatment_Claws" Hover="true" Striped="@true" Filter="new Func<Planned_Treatment_Claw,bool>(ClawFilterFunc1)" @bind-SelectedItem="selectedClaw">
    <ColGroup>
        <col />
        <col />
        <col style="width:15%" />
        <col style="width:15%" />
        <col style="width:15%" />
    </ColGroup>
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchClaw" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Halsbandnummer</MudTh>
        <MudTh>Beschreibung</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>


    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Halsbandnummer">@context.Collar_Number</MudTd>
        <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
        <MudTd><MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => OpenClawInformation(context))">Behandlung öffnen</MudButton></MudTd>
        <MudTd><MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="@(() => AddClawTreatment(context))">Behandlung abschließen</MudButton></MudTd>
        <MudTd><MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => RemovePlannedClawDialog(context))">Behandlung entfernen</MudButton></MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Behandlungen pro Seite" PageSizeOptions="new int[]{25, 50, 100}" />
        </PagerContent>
    </MudTable>

@code {
    private Planned_Treatment_Claw selectedClaw = null;
    private string searchClaw = "";
    private IEnumerable<Planned_Treatment_Claw> Treatment_Claws = new List<Planned_Treatment_Claw>();

    protected override async Task OnInitializedAsync()
    {
        await pClawTreatmentService.GetAllDataAsync();
        Treatment_Claws = pClawTreatmentService.Treatments.ToList();
    }
    private bool ClawFilterFunc1(Planned_Treatment_Claw Treatment_Cow) => FilterFuncClaw(Treatment_Cow, searchClaw);

    private bool FilterFuncClaw(Planned_Treatment_Claw Treatment_Cow, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (Treatment_Cow.Collar_Number.ToString() == searchString)
            return true;
        return false;
    }

    private async Task OpenClawInformation(Planned_Treatment_Claw Claw_Treatment)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await clawTreatmentService.GetAllDataAsync();
        var parameters = new DialogParameters<Show_Planned_Treatment_Claw_Dialog> { { x => x.Planned_Claw_Treatment, Claw_Treatment } };
        DialogService.Show<Show_Planned_Treatment_Claw_Dialog>("", parameters, options);
    }

    async Task AddClawTreatment(Planned_Treatment_Claw Planned_Claw_Treatment)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true};
        var parametersGenericDialog = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Speichern" }, { x => x.Description, "Wollen Sie die Behandlung wirklich Speichern?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Success } };
        var dialog = await DialogService.ShowAsync<GenericDialog>("", parametersGenericDialog, options);
        var result = await dialog.Result;
        if (result.Data == null)
        {

        }
        else
        {

            if ((bool)result.Data && result.Data != null)
            {
                var Claw_Treatment = new Treatment_Claw();
                Claw_Treatment.Collar_Number = Planned_Claw_Treatment.Collar_Number;
                Claw_Treatment.Treatment_Date = DateTime.Now;
                var options1 = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
                var parameters = new DialogParameters<Add_Claw_Treatment_Dialog> { { x => x.Claw_Treatment, Claw_Treatment } };
                DialogService.Show<Add_Claw_Treatment_Dialog>("", parameters, options1);
                await pClawTreatmentService.RemoveByIDAsync(Planned_Claw_Treatment.Planned_Claw_Treatment_ID);
                pClawTreatmentService.Treatments.Remove(Planned_Claw_Treatment);
                Snackbar.Add("Speichern abgeschlossen", Severity.Success);

            }
            else
            {
                Snackbar.Add("Löschen abgebrochen", Severity.Warning);
            }
        }

        StateHasChanged();
    }

    private void OpenPlannedClawDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader=true };
        DialogService.Show<Add_Planned_Claw_Treatment_Dialog>("", options);
    }

    async Task RemovePlannedClawDialog(Planned_Treatment_Claw Planned_Claw_Treatment)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Löschen" }, { x => x.Description, "Wollen Sie die Behandlung wirklich Löschen?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Error } };
        var dialog = await DialogService.ShowAsync<GenericDialog>("",parameters, options);
        var result = await dialog.Result;
        if (result.Data == null)
        {

        }
        else
        {

            if ((bool)result.Data && result.Data != null)
            {
                await pClawTreatmentService.RemoveByIDAsync(Planned_Claw_Treatment.Planned_Claw_Treatment_ID);
                Snackbar.Add("Löschen abgeschlossen", Severity.Success);
                pClawTreatmentService.Treatments.Remove(Planned_Claw_Treatment);

            }
            else
            {
                Snackbar.Add("Löschen abgebrochen", Severity.Warning);
            }
            StateHasChanged();
        }
    }

}
