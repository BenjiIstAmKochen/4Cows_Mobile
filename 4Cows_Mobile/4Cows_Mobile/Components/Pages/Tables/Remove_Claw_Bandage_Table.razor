@page "/Verband_Daten"
@using BB_Cow.Components
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ClawTreatmentService clawTreatmentService
@using BB_Cow.Class
@using BB_Cow.Components.Dialogs

<MudGrid Justify="Justify.FlexEnd">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Secondary" Size="Size.Large" OnClick="OpenClawDialog"></MudIconButton>
</MudGrid>
<MudSpacer></MudSpacer>
<MudText Typo="Typo.h3">Verbände</MudText>

<MudTable Elevation="5" Items="@Treatment_Claws" Hover="true" Striped="@true" Filter="new Func<Treatment_Claw,bool>(ClawFilterFunc1)" @bind-SelectedItem="selectedClaw">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchClaw" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Halsbandnummer</MudTh>
        <MudTh>Verband seit</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Halsbandnummer">@context.Collar_Number</MudTd>
        <MudTd>@($"{(DateTime.Now - context.Treatment_Date).Days} Tage")</MudTd>
            <MudTd><MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => OpenClawInformation(context))">Behandlung öffnen</MudButton></MudTd>
        <MudTd><MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => RemoveBandage(context))"> Verband Löschen</MudButton></MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Verbände pro Seite" PageSizeOptions="new int[]{25, 50, 100}" />
        </PagerContent>
    </MudTable>

    @code {
    private Treatment_Claw selectedClaw = null;
    private string searchClaw = "";
    private IEnumerable<Treatment_Claw> Treatment_Claws = new List<Treatment_Claw>();

    protected override void OnInitialized()
    {
        Treatment_Claws = clawTreatmentService.Treatments.Where(x => (x.Bandage_LH || x.Bandage_LV || x.Bandage_RV || x.Bandage_RH) && !x.IsBandageRemoved).OrderBy(x => x.Treatment_Date);
    }
    private bool ClawFilterFunc1(Treatment_Claw Treatment_Cow) => FilterFuncClaw(Treatment_Cow, searchClaw);

    private bool FilterFuncClaw(Treatment_Claw Treatment_Cow, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (Treatment_Cow.Collar_Number.ToString() == searchString)
            return true;
        return false;
    }

    private async Task OpenClawInformation(Treatment_Claw Claw_Treatment)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await clawTreatmentService.GetAllDataAsync();
        var parameters = new DialogParameters<Show_Claw_Treatment_Dialog> { { x => x.Claw_Treatment, Claw_Treatment } };
        await DialogService.ShowAsync<Show_Claw_Treatment_Dialog>("", parameters, options);
    }

    private void OpenClawDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<Add_Claw_Treatment_Dialog>("", options);
    }

    private async Task RemoveBandage(Treatment_Claw Claw_Treatment)
    {
        if(await clawTreatmentService.RemoveBandageAsync(Claw_Treatment.Claw_Treatment_ID))
        {
            Snackbar.Add($"Verband erfolgreich entfernt!", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Entfernen des Verbands fehlgeschlagen!", Severity.Error);
        }
    }
}
